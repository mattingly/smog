df$X[i] <- "Chongqing"
}
if(length(grep("Shanghai", df$X[i]))>0){
df$X[i] <- "Shanghai"
}
}
df$X
i <- 1
length(grep("Beijing", df$X[i]))
df$X[i] <- substr(df[i, 1], gregexpr(pattern=":", df[i, 1])[[1]][length(gregexpr(pattern=":", df[i, 1])[[1]])-1]+2, nchar(df[i, 1]))
df$X[i]
grep("Beijing", df$X[i]))
grep("Beijing", df$X[i])
if(length(grep("Beijing", df$X[i]))>0){
df$X[i] <- "Beijing"
}
df$X[i]
j <- 49
df <- read.xls(filepaths[j], sheet = 1, header = TRUE)
df$X <- as.character(df$X)
require(gdata)
require(reshape)
require(plyr)
filepaths <- list.files(path = "~/Google Drive/CEIC Data/Prefecture Level City", full.names = TRUE, recursive = TRUE)
icons <- grep("Icon\r", filepaths)
filepaths <- filepaths[-icons]
rm(icons)
j <- 49
df <- read.xls(filepaths[j], sheet = 1, header = TRUE)
df$X <- as.character(df$X)
variable.name <- df[1, 1]
i <- 1
df$X[i] <- substr(df[i, 1], gregexpr(pattern=":", df[i, 1])[[1]][length(gregexpr(pattern=":", df[i, 1])[[1]])-1]+2, nchar(df[i, 1]))
df$X[i]
require(gdata)
require(reshape)
require(plyr)
#Createlist of file paths
filepaths <- list.files(path = "~/Google Drive/CEIC Data/Prefecture Level City", full.names = TRUE, recursive = TRUE)
#Remove file paths for Mac folder icons
icons <- grep("Icon\r", filepaths)
filepaths <- filepaths[-icons]
rm(icons)
for(j in 1:length(filepaths)){
#Read file in
df <- read.xls(filepaths[j], sheet = 1, header = TRUE)
#Force row 1 to be a character vector
df$X <- as.character(df$X)
#Extracting variable name
variable.name <- df[1, 1]
#variable.name <- substr(variable.name, gregexpr(pattern=":", variable.name)[[1]][1]+2, gregexpr(pattern=":", variable.name)[[1]][3]-1)
#Extracting province and city name
for(i in 1:nrow(df)){
df$X[i] <- substr(df[i, 1], gregexpr(pattern=":", df[i, 1])[[1]][length(gregexpr(pattern=":", df[i, 1])[[1]])-1]+2, nchar(df[i, 1]))
if(length(grep("Beijing", df$X[i]))>0){
df$X[i] <- "Beijing"
}
if(length(grep("Tianjin", df$X[i]))>0){
df$X[i] <- "Tianjin"
}
if(length(grep("Chongqing", df$X[i]))>0){
df$X[i] <- "Chongqing"
}
if(length(grep("Shanghai", df$X[i]))>0){
df$X[i] <- "Shanghai"
}
}
#Rename columns to fix formatting
names(df) <- c("City", substr(gsub("[^\\d]+", "", names(df)[2:ncol(df)], perl=TRUE), 1, 4))
#Remove first row if cumulative
if(length(grep("Prefecture Level City", df[1,1]))>0){
df <- df[-1,]
}
#Turn to long format
df <- melt(df, id.var="City")
df$City.Year <- paste(df$City, df$variable)
#Rename variable names
names(df) <- c("City", "Year", variable.name, "City.Year")
df <- df[c("City.Year", variable.name)]
#Merge with previous results
if(j==1){
df2 <- df
}
if(j>1){
df2 <- join(df2, df, by="City.Year", type="full")
}
#Print progress
print(j/length(filepaths))
}
135*0.6888889
j <- 94
df <- read.xls(filepaths[j], sheet = 1, header = TRUE)
df$X <- as.character(df$X)
variable.name <- df[1, 1]
for(i in 1:nrow(df)){
df$X[i] <- substr(df[i, 1], gregexpr(pattern=":", df[i, 1])[[1]][length(gregexpr(pattern=":", df[i, 1])[[1]])-1]+2, nchar(df[i, 1]))
if(length(grep("Beijing", df$X[i]))>0){
df$X[i] <- "Beijing"
}
if(length(grep("Tianjin", df$X[i]))>0){
df$X[i] <- "Tianjin"
}
if(length(grep("Chongqing", df$X[i]))>0){
df$X[i] <- "Chongqing"
}
if(length(grep("Shanghai", df$X[i]))>0){
df$X[i] <- "Shanghai"
}
}
df$X
for(i in 1:nrow(df)){
if(length(grep(":", df$X[i]))>2){
df$X[i] <- substr(df[i, 1], gregexpr(pattern=":", df[i, 1])[[1]][length(gregexpr(pattern=":", df[i, 1])[[1]])-1]+2, nchar(df[i, 1]))
}
if(length(grep("Beijing", df$X[i]))>0){
df$X[i] <- "Beijing"
}
if(length(grep("Tianjin", df$X[i]))>0){
df$X[i] <- "Tianjin"
}
if(length(grep("Chongqing", df$X[i]))>0){
df$X[i] <- "Chongqing"
}
if(length(grep("Shanghai", df$X[i]))>0){
df$X[i] <- "Shanghai"
}
}
df$X
i <- 2
grep(":", df$X[i])
grep(:, df$X[i])
?grep
grep("[:]", df$X[i])
gregexpr(pattern=":", df$X[i])
gregexpr(pattern=":", df$X[i])[[1]]
gregexpr(pattern=":", df$X[i])[[1]][1]
gregexpr(pattern=":", df$X[i])[[1]][2]
gregexpr(pattern=":", df$X[i])[[1]]["match.length"]
grep(pattern=":", df$X[i])
grep(pattern=".:", df$X[i])
grep(".:", df$X[i])
df$X[i]
grep(":", df$X[3])
grep(":", df$X[5])
df$X[5]
df$X[6]
grep(":", df$X[6])
sub(":", df$X[6])
?sub
sub(":", "", df$X[6])
df$X[6]
gregexpr(":", df$X[6], fixed=TRUE)
gregexpr(":", df$X[6], fixed=TRUE)[[1]][1]
length(gregexpr(":", df$X[6], fixed=TRUE)[[1]])
length(gregexpr(":", df$X[1], fixed=TRUE)[[1]])
df$X[1]
j <- 94
df <- read.xls(filepaths[j], sheet = 1, header = TRUE)
df$X <- as.character(df$X)
variable.name <- df[1, 1]
for(i in 1:nrow(df)){
if(length(gregexpr(":", df$X[i], fixed=TRUE)[[1]])>2){
df$X[i] <- substr(df[i, 1], gregexpr(pattern=":", df[i, 1])[[1]][length(gregexpr(pattern=":", df[i, 1])[[1]])-1]+2, nchar(df[i, 1]))
}
if(length(grep("Beijing", df$X[i]))>0){
df$X[i] <- "Beijing"
}
if(length(grep("Tianjin", df$X[i]))>0){
df$X[i] <- "Tianjin"
}
if(length(grep("Chongqing", df$X[i]))>0){
df$X[i] <- "Chongqing"
}
if(length(grep("Shanghai", df$X[i]))>0){
df$X[i] <- "Shanghai"
}
}
df$X
names(df) <- c("City", substr(gsub("[^\\d]+", "", names(df)[2:ncol(df)], perl=TRUE), 1, 4))
#Remove first row if cumulative
if(length(grep("Prefecture Level City", df[1,1]))>0){
df <- df[-1,]
}
if(length(grep("CN", df[1,1]))>0){
df <- df[-1,]
}
df$X
df$City
require(gdata)
require(reshape)
require(plyr)
#Createlist of file paths
filepaths <- list.files(path = "~/Google Drive/CEIC Data/Prefecture Level City", full.names = TRUE, recursive = TRUE)
#Remove file paths for Mac folder icons
icons <- grep("Icon\r", filepaths)
filepaths <- filepaths[-icons]
rm(icons)
j <- 94
for(j in 1:length(filepaths)){
#Read file in
df <- read.xls(filepaths[j], sheet = 1, header = TRUE)
#Force row 1 to be a character vector
df$X <- as.character(df$X)
#Extracting variable name
variable.name <- df[1, 1]
#variable.name <- substr(variable.name, gregexpr(pattern=":", variable.name)[[1]][1]+2, gregexpr(pattern=":", variable.name)[[1]][3]-1)
#Extracting province and city name
for(i in 1:nrow(df)){
if(length(gregexpr(":", df$X[i], fixed=TRUE)[[1]])>2){
df$X[i] <- substr(df[i, 1], gregexpr(pattern=":", df[i, 1])[[1]][length(gregexpr(pattern=":", df[i, 1])[[1]])-1]+2, nchar(df[i, 1]))
}
if(length(grep("Beijing", df$X[i]))>0){
df$X[i] <- "Beijing"
}
if(length(grep("Tianjin", df$X[i]))>0){
df$X[i] <- "Tianjin"
}
if(length(grep("Chongqing", df$X[i]))>0){
df$X[i] <- "Chongqing"
}
if(length(grep("Shanghai", df$X[i]))>0){
df$X[i] <- "Shanghai"
}
}
#Rename columns to fix formatting
names(df) <- c("City", substr(gsub("[^\\d]+", "", names(df)[2:ncol(df)], perl=TRUE), 1, 4))
#Remove first row if cumulative
if(length(grep("Prefecture Level City", df[1,1]))>0){
df <- df[-1,]
}
if(length(grep("CN", df[1,1]))>0){
df <- df[-1,]
}
#Turn to long format
df <- melt(df, id.var="City")
df$City.Year <- paste(df$City, df$variable)
#Rename variable names
names(df) <- c("City", "Year", variable.name, "City.Year")
df <- df[c("City.Year", variable.name)]
#Merge with previous results
if(j==1){
df2 <- df
}
if(j>1){
df2 <- join(df2, df, by="City.Year", type="full")
}
#Print progress
print(j/length(filepaths))
}
head(df2)
length(unique(df2$City.Year))
length(which(duplicated(df2$City.Year)==TRUE))
df2$City.Year[which(substr(df2$City.Year, nchar(df2$City.Year)-3, nchar(df2$City.Year))==2012)]
paste(as.character('Beijing_Weather_Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
as.character('DailyHistory.html'),
sep="_")
beijing.2008 <- read.csv("./data/beijing/Beijing_2008_HourlyPM25.csv")
beijing.2009 <- read.csv("./data/beijing/Beijing_2009_HourlyPM25.csv")
beijing.2010 <- read.csv("./data/beijing/Beijing_2010_HourlyPM25.csv")
beijing.2011 <- read.csv("./data/beijing/Beijing_2011_HourlyPM25.csv")
beijing.2012 <- read.csv("./data/beijing/Beijing_2012_HourlyPM25.csv")
beijing.2013 <- read.csv("./data/beijing/Beijing_2013_HourlyPM25.csv")
beijing.2014 <- read.csv("./data/beijing/Beijing_2014_HourlyPM25.csv")
#Standardize column names
names(beijing.2009) <- names(beijing.2008)
names(beijing.2010) <- names(beijing.2008)
names(beijing.2011) <- names(beijing.2008)
names(beijing.2012) <- names(beijing.2008)
names(beijing.2013) <- names(beijing.2008)
names(beijing.2014) <- names(beijing.2008)
#Fix daylight savings time glitch in data
beijing.2009$Hour[which(duplicated(beijing.2009$Date)==TRUE)-1] <- 2
beijing.2010$Hour[which(duplicated(beijing.2010$Date)==TRUE)-1] <- 2
beijing.2011$Hour[which(duplicated(beijing.2011$Date)==TRUE)-1] <- 2
beijing.2014$Hour[which(duplicated(beijing.2014$Date)==TRUE)-1] <- 2
#Combine into one file
beijing <- rbind(beijing.2008, beijing.2009, beijing.2010, beijing.2011, beijing.2012, beijing.2013, beijing.2014)
rm(beijing.2008, beijing.2009, beijing.2010, beijing.2011, beijing.2012, beijing.2013, beijing.2014)
#Remove columns with no unique information
remove <- c("Date..LST.","Parameter", "Duration", "Site", "QC.Name")
beijing <- beijing[,!(names(beijing) %in% remove)]
rm(remove)
#Recast to be a daily dataset
require(reshape2)
beijing <- dcast(beijing, Year + Month + Day ~ Hour, value.var="Value")
head(beijing)
#Standardize NAs
beijing[beijing==-999] <- NA
setwd("~/Dropbox/research/pollution")
#A fact sheet with definitions and metadata for this dataset can be found at http://www.stateair.net/web/historical/1/1.html.
#The U.S. Department of State Data Use Statement at http://www.stateair.net/web/historical/1/1.html applies to these and all data available from the Mission China air quality monitoring program.
#Read in data
beijing.2008 <- read.csv("./data/beijing/Beijing_2008_HourlyPM25.csv")
beijing.2009 <- read.csv("./data/beijing/Beijing_2009_HourlyPM25.csv")
beijing.2010 <- read.csv("./data/beijing/Beijing_2010_HourlyPM25.csv")
beijing.2011 <- read.csv("./data/beijing/Beijing_2011_HourlyPM25.csv")
beijing.2012 <- read.csv("./data/beijing/Beijing_2012_HourlyPM25.csv")
beijing.2013 <- read.csv("./data/beijing/Beijing_2013_HourlyPM25.csv")
beijing.2014 <- read.csv("./data/beijing/Beijing_2014_HourlyPM25.csv")
#Standardize column names
names(beijing.2009) <- names(beijing.2008)
names(beijing.2010) <- names(beijing.2008)
names(beijing.2011) <- names(beijing.2008)
names(beijing.2012) <- names(beijing.2008)
names(beijing.2013) <- names(beijing.2008)
names(beijing.2014) <- names(beijing.2008)
#Fix daylight savings time glitch in data
beijing.2009$Hour[which(duplicated(beijing.2009$Date)==TRUE)-1] <- 2
beijing.2010$Hour[which(duplicated(beijing.2010$Date)==TRUE)-1] <- 2
beijing.2011$Hour[which(duplicated(beijing.2011$Date)==TRUE)-1] <- 2
beijing.2014$Hour[which(duplicated(beijing.2014$Date)==TRUE)-1] <- 2
#Combine into one file
beijing <- rbind(beijing.2008, beijing.2009, beijing.2010, beijing.2011, beijing.2012, beijing.2013, beijing.2014)
rm(beijing.2008, beijing.2009, beijing.2010, beijing.2011, beijing.2012, beijing.2013, beijing.2014)
#Remove columns with no unique information
remove <- c("Date..LST.","Parameter", "Duration", "Site", "QC.Name")
beijing <- beijing[,!(names(beijing) %in% remove)]
rm(remove)
#Recast to be a daily dataset
require(reshape2)
beijing <- dcast(beijing, Year + Month + Day ~ Hour, value.var="Value")
head(beijing)
#Standardize NAs
beijing[beijing==-999] <- NA
paste(as.character('Beijing_Weather_Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep="_")
i <- 10
paste(as.character('Beijing_Weather_Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep="_")
url <- "http://www.wunderground.com/history/airport/ZBAA/2014/4/12/DailyHistory.html"
tables <- readHTMLTable(url)
library(XML)
tables <- readHTMLTable(url)
paste(as.character('Beijing_Weather_Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep="_",
as.character(".csv"))
paste(as.character('Beijing_Weather_Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
sep="_",
as.character(beijing$Day[i]),
as.character(".csv"))
paste(as.character('Beijing_Weather_Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep=".",
as.character(".csv"))
paste(as.character('Beijing_Weather_Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep=".",
as.character("csv"))
?paste
paste(as.character('Beijing.Weather.Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep=".",
as.character("csv"))
write.csv(tables["obsTable"], file=paste(as.character('Beijing.Weather.Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep=".",
as.character("csv")))
tables["obsTable"]
class(tables["obsTable"])
data.frame(tables["obsTable"])
write.csv(data.frame(tables["obsTable"]), file=paste(as.character('Beijing.Weather.Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep=".",
as.character("csv")))
write.table((data.frame(tables["obsTable"]),
file=paste(as.character('Beijing.Weather.Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep=".",
as.character("csv"))
row.names=FALSE,
sep=",")
write.table(data.frame(tables["obsTable"]),
file=paste(as.character('Beijing.Weather.Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep=".",
as.character("csv"))
row.names=FALSE,
sep=",")
write.table(data.frame(tables["obsTable"]),
file=paste(as.character('Beijing.Weather.Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
as.character("csv"))
row.names=FALSE,
write.table(data.frame(tables["obsTable"]),
file=paste(as.character('Beijing.Weather.Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep=".",
as.character("csv")),
row.names=FALSE,
sep=",")
tables["obsTable"]
url <- "http://www.wunderground.com/history/airport/ZBAA/2014/4/12/DailyHistory.html"
tables <- readHTMLTable(url)
observations <- data.frame(tables["obsTable"])
rm(tables)
names(observations)
substr(names(observations), 9, nchar(names(observations)))
substr(names(observations), 10, nchar(names(observations)))
names(observations) <- substr(names(observations), 10, nchar(names(observations)))
observations$Temp.
substr(observations$Temp., 0, nchar(observations$Temp.)-3)
substr(observations$Temp., 0, nchar(as.character(observations$Temp.))-3)
observations$Temp. <- substr(observations$Temp., 0, nchar(as.character(observations$Temp.))-3)
observations$Temp.
observations
substr(observations$Dew.Point, 0, nchar(as.character(observations$Temp.))-3)
substr(observations$Dew.Point, 0, nchar(as.character(observations$Dew.Point))-3)
observations$Dew.Point <- substr(observations$Dew.Point, 0, nchar(as.character(observations$Dew.Point))-3)
observations
substr(observations$Humidity, 0, nchar(as.character(observations$Humidity))-1)
observations$Humidity <- substr(observations$Humidity, 0, nchar(as.character(observations$Humidity))-1)
substr(observations$Pressure, 0, nchar(as.character(observations$Pressure))-3)
observations$Pressure <- substr(observations$Pressure, 0, nchar(as.character(observations$Pressure))-3)
substr(observations$Visibility, 0, nchar(as.character(observations$Visibility))-3)
observations$Visibility <- substr(observations$Visibility, 0, nchar(as.character(observations$Visibility))-3)
substr(observations$Wind.Speed, 0, nchar(as.character(observations$Wind.Speed))-3)
substr(observations$Wind.Speed, 0, nchar(as.character(observations$Wind.Speed))-4)
observations$Wind.Speed <- substr(observations$Wind.Speed, 0, nchar(as.character(observations$Wind.Speed))-4)
setwd(setwd("~/Dropbox/research/pollution/weather")
for(i in 1:10){
#Read in the HTLM data tables from the day that row represents
tables <- readHTMLTable(paste(as.character('http://www.wunderground.com/history/airport/ZBAA'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
as.character('DailyHistory.html'),
sep="/"))
#Read in the specific table with hourly observations
observations <- data.frame(tables["obsTable"])
#Create more sensible column names than in the HTML table
names(observations) <- substr(names(observations), 10, nchar(names(observations)))
#Eliminate redundant units of measurement (which export poorly to csv)
observations$Temp. <- substr(observations$Temp., 0, nchar(as.character(observations$Temp.))-3)
observations$Dew.Point <- substr(observations$Dew.Point, 0, nchar(as.character(observations$Dew.Point))-3)
observations$Humidity <- substr(observations$Humidity, 0, nchar(as.character(observations$Humidity))-1)
observations$Pressure <- substr(observations$Pressure, 0, nchar(as.character(observations$Pressure))-3)
observations$Visibility <- substr(observations$Visibility, 0, nchar(as.character(observations$Visibility))-3)
observations$Wind.Speed <- substr(observations$Wind.Speed, 0, nchar(as.character(observations$Wind.Speed))-4)
#Write to csv file
write.csv(observations,
file=paste(as.character('Beijing.Weather.Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep=".",
as.character("csv")))
#Print progress report
print(i/nrow(beijing))
}
setwd("~/Dropbox/research/pollution/weather")
for(i in 1:10){
#Read in the HTLM data tables from the day that row represents
tables <- readHTMLTable(paste(as.character('http://www.wunderground.com/history/airport/ZBAA'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
as.character('DailyHistory.html'),
sep="/"))
#Read in the specific table with hourly observations
observations <- data.frame(tables["obsTable"])
#Create more sensible column names than in the HTML table
names(observations) <- substr(names(observations), 10, nchar(names(observations)))
#Eliminate redundant units of measurement (which export poorly to csv)
observations$Temp. <- substr(observations$Temp., 0, nchar(as.character(observations$Temp.))-3)
observations$Dew.Point <- substr(observations$Dew.Point, 0, nchar(as.character(observations$Dew.Point))-3)
observations$Humidity <- substr(observations$Humidity, 0, nchar(as.character(observations$Humidity))-1)
observations$Pressure <- substr(observations$Pressure, 0, nchar(as.character(observations$Pressure))-3)
observations$Visibility <- substr(observations$Visibility, 0, nchar(as.character(observations$Visibility))-3)
observations$Wind.Speed <- substr(observations$Wind.Speed, 0, nchar(as.character(observations$Wind.Speed))-4)
#Write to csv file
write.csv(observations,
file=paste(as.character('Beijing.Weather.Hourly'),
as.character(beijing$Year[i]),
as.character(beijing$Month[i]),
as.character(beijing$Day[i]),
sep=".",
as.character("csv")))
#Print progress report
print(i/nrow(beijing))
}
